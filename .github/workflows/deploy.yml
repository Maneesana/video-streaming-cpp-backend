name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
  SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
  APP_DIR: /opt/video-streaming

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: List repository contents
        run: |
          echo "=== Repository root ==="
          ls -la
          echo "=== Contents of src/dto ==="
          ls -la src/dto/
          echo "=== Contents of external ==="
          ls -la external/
          echo "=== Git status ==="
          git status
          echo "=== Git submodule status ==="
          git submodule status

      - name: Fix file case sensitivity
        run: |
          if [ -f "src/dto/DTOs.hpp" ]; then
            mv src/dto/DTOs.hpp src/dto/dtos.hpp
          fi

      - name: Build and test
        run: |
          docker-compose build
          docker-compose up -d
          sleep 15
          curl -f http://localhost:8000/ || exit 1

      - name: Stop containers
        run: docker-compose down

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          chmod 700 ~/.ssh
          echo "=== SSH key permissions ==="
          ls -la ~/.ssh/
          echo "=== Testing SSH connection ==="
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -v ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'echo "SSH connection successful"'

      - name: Deploy to EC2
        run: |
          # Function to retry commands
          retry() {
            local -r -i max_attempts="$1"; shift
            local -r cmd="$@"
            local -i attempt_num=1
            until $cmd
            do
              if (( attempt_num == max_attempts ))
              then
                echo "Attempt $attempt_num failed and there are no more attempts left!"
                return 1
              else
                echo "Attempt $attempt_num failed! Trying again in 5 seconds..."
                attempt_num=$((attempt_num + 1))
                sleep 5
              fi
            done
          }

          # Copy files to EC2 with retry
          echo "=== Copying files to EC2 ==="
          retry 3 scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -r ./* ubuntu@ec2-44-211-143-82.compute-1.amazonaws.com:/home/ubuntu/
          retry 3 scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=60 -o ServerAliveCountMax=3 deploy.sh ubuntu@ec2-44-211-143-82.compute-1.amazonaws.com:/home/ubuntu/

          # Execute deployment script with retry and nohup
          echo "=== Executing deployment script ==="
          retry 3 ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=60 -o ServerAliveCountMax=3 ubuntu@ec2-44-211-143-82.compute-1.amazonaws.com 'nohup ./deploy.sh > deploy.log 2>&1 &'

          # Wait for deployment to complete
          echo "=== Waiting for deployment to complete ==="
          retry 10 ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=60 -o ServerAliveCountMax=3 ubuntu@ec2-44-211-143-82.compute-1.amazonaws.com 'while ! grep -q "âœ… Deployment completed successfully!" deploy.log; do sleep 5; done'
