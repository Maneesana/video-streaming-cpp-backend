name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
  SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
  APP_DIR: /opt/video-streaming
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: List repository contents
        run: |
          echo "=== Repository root ==="
          ls -la
          echo "=== Contents of src/dto ==="
          ls -la src/dto/
          echo "=== Contents of external ==="
          ls -la external/
          echo "=== Git status ==="
          git status
          echo "=== Git submodule status ==="
          git submodule status

      - name: Fix file case sensitivity
        run: |
          if [ -f "src/dto/DTOs.hpp" ]; then
            mv src/dto/DTOs.hpp src/dto/dtos.hpp
          fi

      - name: Build and test
        run: |
          # Get number of available cores
          NPROC=$(nproc)
          echo "Building with $NPROC cores..."

          # Build with parallel jobs
          docker-compose build --parallel --build-arg BUILDKIT_INLINE_CACHE=1

          # Start containers
          docker-compose up -d
          sleep 15
          curl -f http://localhost:8000/ || exit 1

      - name: Stop containers
        run: docker-compose down

      - name: Create deployment package
        run: |
          # Create deploy directory
          mkdir -p deploy

          # Build the builder stage separately
          echo "Building builder stage..."
          docker build --target builder -t video-streaming-builder .

          # Get the image ID and create container
          IMAGE_ID=$(docker images -q video-streaming-builder)
          if [ -z "$IMAGE_ID" ]; then
            echo "Error: Could not find the built image"
            docker images
            exit 1
          fi

          echo "Found image ID: $IMAGE_ID"

          # Create and start a temporary container from the builder stage with a command to keep it running
          docker create --name temp_container $IMAGE_ID tail -f /dev/null
          docker start temp_container

          # Wait for container to be ready
          sleep 2

          # Create minimal deployment package
          echo "Creating minimal deployment package..."
          mkdir -p deploy/build

          # Copy only necessary files
          echo "Copying executable and library..."
          docker cp temp_container:/app/build/video-streaming deploy/build/
          docker cp temp_container:/app/build/libvideo-streaming-lib.a deploy/build/

          # Copy docker-compose.yml
          docker cp temp_container:/app/docker-compose.yml deploy/

          # Create deploy.sh script
          echo "Creating deploy.sh script..."
          echo '#!/bin/bash' > deploy/deploy.sh
          echo '' >> deploy/deploy.sh
          echo '# Stop any existing containers' >> deploy/deploy.sh
          echo 'docker-compose down || true' >> deploy/deploy.sh
          echo '' >> deploy/deploy.sh
          echo '# Build and start the containers' >> deploy/deploy.sh
          echo 'docker-compose up -d --build' >> deploy/deploy.sh
          echo '' >> deploy/deploy.sh
          echo '# Wait for the application to be ready' >> deploy/deploy.sh
          echo 'echo "Waiting for application to start..."' >> deploy/deploy.sh
          echo 'sleep 10' >> deploy/deploy.sh
          echo '' >> deploy/deploy.sh
          echo '# Check if the application is running' >> deploy/deploy.sh
          echo 'if curl -f http://localhost:8000/; then' >> deploy/deploy.sh
          echo '    echo "Application is running successfully"' >> deploy/deploy.sh
          echo '    exit 0' >> deploy/deploy.sh
          echo 'else' >> deploy/deploy.sh
          echo '    echo "Application failed to start"' >> deploy/deploy.sh
          echo '    docker-compose logs' >> deploy/deploy.sh
          echo '    exit 1' >> deploy/deploy.sh
          echo 'fi' >> deploy/deploy.sh

          # Make deploy.sh executable
          chmod +x deploy/deploy.sh

          # Clean up
          docker stop temp_container
          docker rm temp_container

          # Verify contents
          echo "=== Deployment package contents ==="
          ls -la deploy/
          echo "=== Build directory contents ==="
          ls -la deploy/build/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deploy-package
          path: deploy/
          retention-days: 1

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: deploy-package
          path: deploy

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install SSH key
        run: |
          # Debug: Show current user and home directory
          echo "Current user: $(whoami)"
          echo "Home directory: $HOME"
          echo "Current directory: $(pwd)"
          echo "Directory permissions:"
          ls -la /home/runner

          # Create .ssh directory with proper permissions
          echo "Creating .ssh directory..."
          mkdir -p /home/runner/.ssh
          if [ $? -ne 0 ]; then
            echo "Failed to create .ssh directory"
            echo "Current directory permissions:"
            ls -la /home/runner
            exit 1
          fi

          # Set permissions for .ssh directory
          echo "Setting .ssh directory permissions..."
          chmod 700 /home/runner/.ssh
          if [ $? -ne 0 ]; then
            echo "Failed to set permissions on .ssh directory"
            echo "Current .ssh directory permissions:"
            ls -la /home/runner/.ssh
            exit 1
          fi

          # Write the SSH key with proper line endings
          echo "Writing SSH key..."
          echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > /home/runner/.ssh/deploy_key
          if [ $? -ne 0 ]; then
            echo "Failed to write SSH key"
            echo "Current .ssh directory contents:"
            ls -la /home/runner/.ssh
            exit 1
          fi

          # Set permissions for SSH key
          echo "Setting SSH key permissions..."
          chmod 600 /home/runner/.ssh/deploy_key
          if [ $? -ne 0 ]; then
            echo "Failed to set permissions on SSH key"
            echo "Current SSH key permissions:"
            ls -l /home/runner/.ssh/deploy_key
            exit 1
          fi

          # Add host to known_hosts with retry
          echo "Adding host to known_hosts..."
          for i in {1..3}; do
            echo "Attempt $i to add host to known_hosts..."
            if ssh-keyscan -H "${{ secrets.EC2_HOST }}" >> /home/runner/.ssh/known_hosts; then
              echo "Successfully added host to known_hosts"
              break
            else
              echo "Failed to add host to known_hosts on attempt $i"
              if [ $i -eq 3 ]; then
                echo "All attempts to add host to known_hosts failed"
                echo "Current known_hosts contents:"
                cat /home/runner/.ssh/known_hosts
                echo "Testing host connectivity..."
                ping -c 1 "${{ secrets.EC2_HOST }}" || echo "Host is not reachable"
                exit 1
              fi
              sleep 2
            fi
          done

          # Set permissions for known_hosts
          echo "Setting known_hosts permissions..."
          chmod 644 /home/runner/.ssh/known_hosts
          if [ $? -ne 0 ]; then
            echo "Failed to set permissions on known_hosts"
            echo "Current known_hosts permissions:"
            ls -l /home/runner/.ssh/known_hosts
            exit 1
          fi

          # Debug information (without exposing sensitive data)
          echo "SSH directory permissions:"
          ls -la /home/runner/.ssh/
          echo "SSH key permissions:"
          ls -l /home/runner/.ssh/deploy_key
          echo "Attempting to connect to host: ${EC2_HOST:0:10}..."

          # Test SSH connection with verbose output
          ssh -i /home/runner/.ssh/deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o LogLevel=DEBUG3 ubuntu@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'" || {
            echo "SSH connection failed. Checking key format..."
            head -n 1 /home/runner/.ssh/deploy_key
            echo "Please verify:"
            echo "1. The SSH key is in the correct format (should start with '-----BEGIN RSA PRIVATE KEY-----')"
            echo "2. The key has the correct permissions (600)"
            echo "3. The host is accessible and the security group allows SSH (port 22)"
            echo "4. The EC2 instance is running and has the correct public IP"
            echo "5. The SSH key is added to the authorized_keys on the EC2 instance"
            exit 1
          }

      - name: Deploy to EC2
        run: |
          # Function to retry commands
          retry() {
            local max_attempts=3
            local attempt=1
            local wait=5
            local exitCode=0

            while (( $attempt < $max_attempts ))
            do
              if "$@"; then
                return 0
              else
                exitCode=$?
                echo "Attempt $attempt failed! Trying again in $wait seconds..."
                sleep $wait
                attempt=$(( attempt + 1 ))
                wait=$(( wait * 2 ))
              fi
            done

            if [[ $exitCode != 0 ]]; then
              echo "All $max_attempts attempts failed!"
              echo "Last error code: $exitCode"
              return $exitCode
            fi
          }

          # Function to verify EC2 instance is accessible
          verify_ec2_access() {
            echo "Verifying EC2 instance accessibility..."
            if ! ssh -i /home/runner/.ssh/deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=5 ubuntu@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"; then
              echo "❌ Cannot connect to EC2 instance. Please check if:"
              echo "1. The instance is running in AWS Console"
              echo "2. The security group allows inbound SSH (port 22)"
              echo "3. The instance's public IP is correct"
              echo "4. The SSH key is valid"
              return 1
            fi
            echo "✅ EC2 instance is accessible via SSH"
            return 0
          }

          # Verify EC2 access before proceeding
          verify_ec2_access || exit 1

          echo "=== Copying files to EC2 ==="
          retry scp -i /home/runner/.ssh/deploy_key -r deploy/* ubuntu@${{ secrets.EC2_HOST }}:~/app/

          echo "=== Running deployment script ==="
          retry ssh -i /home/runner/.ssh/deploy_key ubuntu@${{ secrets.EC2_HOST }} "cd ~/app && chmod +x deploy.sh && ./deploy.sh"
