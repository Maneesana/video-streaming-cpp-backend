name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
  SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
  APP_DIR: /opt/video-streaming
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: List repository contents
        run: |
          echo "=== Repository root ==="
          ls -la
          echo "=== Contents of src/dto ==="
          ls -la src/dto/
          echo "=== Contents of external ==="
          ls -la external/
          echo "=== Git status ==="
          git status
          echo "=== Git submodule status ==="
          git submodule status

      - name: Fix file case sensitivity
        run: |
          if [ -f "src/dto/DTOs.hpp" ]; then
            mv src/dto/DTOs.hpp src/dto/dtos.hpp
          fi

      - name: Build and test
        run: |
          # Get number of available cores
          NPROC=$(nproc)
          echo "Building with $NPROC cores..."

          # Build with parallel jobs
          docker-compose build --parallel --build-arg BUILDKIT_INLINE_CACHE=1

          # Start containers
          docker-compose up -d
          sleep 15
          curl -f http://localhost:8000/ || exit 1

      - name: Stop containers
        run: docker-compose down

      - name: Create deployment package
        run: |
          # Create deploy directory
          mkdir -p deploy

          # Build the builder stage separately
          echo "Building builder stage..."
          docker build --target builder -t video-streaming-builder .

          # Get the image ID and create container
          IMAGE_ID=$(docker images -q video-streaming-builder)
          if [ -z "$IMAGE_ID" ]; then
            echo "Error: Could not find the built image"
            docker images
            exit 1
          fi

          echo "Found image ID: $IMAGE_ID"

          # Create and start a temporary container from the builder stage
          docker create --name temp_container $IMAGE_ID
          docker start temp_container

          # Wait for container to be ready
          sleep 2

          # Copy artifacts from the container
          echo "=== Copying artifacts from container ==="
          echo "=== Container contents ==="
          docker exec temp_container ls -la /app/build/

          # Copy build artifacts
          docker cp temp_container:/app/build/. deploy/build/
          docker cp temp_container:/app/docker-compose.yml deploy/

          # Clean up
          docker stop temp_container
          docker rm temp_container

          # Verify contents
          echo "=== Deployment package contents ==="
          ls -la deploy/
          echo "=== Build directory contents ==="
          ls -la deploy/build/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deploy-package
          path: deploy/
          retention-days: 1

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: deploy-package
          path: deploy

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          # Debug: Print host (without exposing the full secret)
          echo "Connecting to host: ${EC2_HOST:0:10}..."
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -v ubuntu@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"

      - name: Deploy to EC2
        run: |
          # Function to retry commands
          retry() {
            local max_attempts=3
            local attempt=1
            local wait=5
            local exitCode=0

            while (( $attempt < $max_attempts ))
            do
              if "$@"; then
                return 0
              else
                exitCode=$?
                echo "Attempt $attempt failed! Trying again in $wait seconds..."
                sleep $wait
                attempt=$(( attempt + 1 ))
                wait=$(( wait * 2 ))
              fi
            done

            if [[ $exitCode != 0 ]]; then
              echo "All $max_attempts attempts failed!"
              echo "Last error code: $exitCode"
              return $exitCode
            fi
          }

          # Function to verify EC2 instance is accessible
          verify_ec2_access() {
            echo "Verifying EC2 instance accessibility..."
            if ! ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=5 ubuntu@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"; then
              echo "❌ Cannot connect to EC2 instance. Please check if:"
              echo "1. The instance is running in AWS Console"
              echo "2. The security group allows inbound SSH (port 22)"
              echo "3. The instance's public IP is correct"
              echo "4. The SSH key is valid"
              return 1
            fi
            echo "✅ EC2 instance is accessible via SSH"
            return 0
          }

          # Verify EC2 access before proceeding
          verify_ec2_access || exit 1

          echo "=== Copying files to EC2 ==="
          retry scp -i ~/.ssh/deploy_key -r deploy/* ubuntu@${{ secrets.EC2_HOST }}:~/app/

          echo "=== Running deployment script ==="
          retry ssh -i ~/.ssh/deploy_key ubuntu@${{ secrets.EC2_HOST }} "cd ~/app && chmod +x deploy.sh && ./deploy.sh"
