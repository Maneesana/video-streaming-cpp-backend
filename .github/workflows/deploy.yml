name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
  SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
  APP_DIR: /opt/video-streaming

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: List repository contents
        run: |
          echo "=== Repository root ==="
          ls -la
          echo "=== Contents of src/dto ==="
          ls -la src/dto/
          echo "=== Contents of external ==="
          ls -la external/
          echo "=== Git status ==="
          git status
          echo "=== Git submodule status ==="
          git submodule status

      - name: Fix file case sensitivity
        run: |
          if [ -f "src/dto/DTOs.hpp" ]; then
            mv src/dto/DTOs.hpp src/dto/dtos.hpp
          fi

      - name: Build and test
        run: |
          docker-compose build
          docker-compose up -d
          sleep 15
          curl -f http://localhost:8000/ || exit 1

      - name: Stop containers
        run: docker-compose down

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          set -e

          echo "🚀 Starting deployment process..."

          # Update system packages
          echo "📦 Updating system packages..."
          sudo apt-get update
          sudo apt-get upgrade -y

          # Remove old Docker packages
          echo "🧹 Removing old Docker packages..."
          sudo apt-get remove -y docker docker-engine docker.io containerd runc || true
          sudo apt-get autoremove -y

          # Install Docker prerequisites
          echo "📦 Installing Docker prerequisites..."
          sudo apt-get install -y \
              apt-transport-https \
              ca-certificates \
              curl \
              gnupg \
              lsb-release

          # Add Docker's official GPG key
          echo "🔑 Adding Docker's GPG key..."
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

          # Set up the Docker repository
          echo "📦 Setting up Docker repository..."
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          # Install Docker
          echo "📦 Installing Docker..."
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

          # Install required dependencies
          echo "📦 Installing other dependencies..."
          sudo apt-get install -y \
              build-essential \
              cmake \
              git \
              libpq-dev \
              dos2unix \
              nginx \
              certbot \
              python3-certbot-nginx

          # Start and enable Docker service
          echo "🐳 Setting up Docker..."
          sudo systemctl start docker
          sudo systemctl enable docker

          # Add current user to docker group
          echo "👤 Adding user to docker group..."
          sudo usermod -aG docker $USER

          # Create application directory
          echo "📁 Setting up application directory..."
          APP_DIR="/opt/video-streaming"
          sudo mkdir -p $APP_DIR
          sudo chown -R $USER:$USER $APP_DIR

          # Copy application files
          echo "📋 Copying application files..."
          cp -r ./* $APP_DIR/
          cd $APP_DIR

          # Fix line endings
          echo "🔧 Fixing line endings..."
          dos2unix configure.sh build.sh run.sh
          chmod +x configure.sh build.sh run.sh

          # Build and run with Docker
          echo "🏗️ Building and running application..."
          docker-compose up --build -d

          # Create systemd service file
          echo "⚙️ Creating systemd service..."
          sudo tee /etc/systemd/system/video-streaming.service << EOF
          [Unit]
          Description=Video Streaming Service
          After=docker.service
          Requires=docker.service

          [Service]
          Type=simple
          User=$USER
          WorkingDirectory=$APP_DIR
          ExecStart=/usr/local/bin/docker-compose up
          ExecStop=/usr/local/bin/docker-compose down
          Restart=always

          [Install]
          WantedBy=multi-user.target
          EOF

          # Reload systemd and enable service
          echo "🔄 Setting up systemd service..."
          sudo systemctl daemon-reload
          sudo systemctl enable video-streaming
          sudo systemctl start video-streaming

          echo "✅ Deployment completed successfully!"
          EOL

          chmod +x deploy.sh

          # Copy files to EC2
          scp -i ~/.ssh/deploy_key -r ./* ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/
          scp -i ~/.ssh/deploy_key deploy.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/

          # Execute deployment script
          ssh -i ~/.ssh/deploy_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} './deploy.sh'
